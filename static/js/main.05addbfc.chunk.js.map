{"version":3,"sources":["data/shapes.ts","state/grid/grid-slice.ts","data/grid.ts","state/game/game-slice.ts","data/game.ts","state/shapes/current-slice.ts","state/shapes/shape-generator.ts","state/shapes/next-slice.ts","state/shapes/hold-slice.ts","controller/game-controller/game-controller.ts","controller/input-controller/input-controller.ts","components/block/block.tsx","components/grid/grid.tsx","components/shape/shape.tsx","components/shape-window/shape-window.tsx","views/stats-view/stats-view.tsx","views/game-view/game-view.tsx","views/pause-view/pause-view.tsx","pages/tetris/tetris-page.tsx","App.tsx","state/store.ts","index.tsx"],"names":["BlockColor","ShapeType","availableShapes","L","bitmap","color","Orange","O","Yellow","T","Purple","S","Green","Z","Red","J","Blue","I","Teal","totalNumShapes","Object","keys","length","generateInitialGrid","numOfRows","numOfColumns","Array","fill","isGhosted","Empty","initialState","rows","gutterRows","gridSlice","createSlice","name","reducers","update","state","action","payload","actions","gameOver","level","lines","paused","remainingLines","score","tickInterval","gameSlice","removedLines","countRemovedLines","pause","interval","clearInterval","undefined","createdInterval","currentSlice","move","position","rotate","orientation","currentActions","generateNextShape","type","Math","floor","random","nextSlice","nextActions","holdSlice","holdActions","tick","dispatch","getState","grid","current","next","gutter","useNext","checkCanShapeMove","removeCompleteRows","rowsRemovedCount","newGrid","gridState","renderNewGrid","currentPosition","x","y","incrementedPosition","moveToTheSide","movement","canShapeMove","swapHold","hold","filter","row","findIndex","block","completedRowsCount","i","unshift","computeShapeCoordinates","shape","coordinates","forEach","yIx","bit","xIx","push","shapeCoordinates","coordinate","newGridRow","keyPressHandler","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","increment","console","log","p","P","Shift","handleKeyPress","event","handler","key","Block","classNames","toLowerCase","Boolean","join","className","Grid","gridContents","map","rowIx","renderedRow","columnIx","GridContainer","useSelector","trimBitmap","trimmedBitmap","removeFirst","removeLast","trimmedBitmapRow","index","Shape","renderedShape","isFilled","ShapeWindow","title","onTouchStart","NextShapeWindow","HoldShapeWindow","useDispatch","Stat","label","value","StatsView","game","GameView","isPaused","currentInterval","useEffect","setInterval","Fragment","PauseView","onKeyDown","tabIndex","onClick","TetrisPage","App","basename","path","element","href","target","rel","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"2SAAYA,EAWAC,E,8FAXAD,O,iBAAAA,I,aAAAA,I,iBAAAA,I,eAAAA,I,mBAAAA,I,mBAAAA,I,eAAAA,I,oBAAAA,M,cAWAC,O,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,SAAAA,I,UAAAA,M,KAmBL,IAAMC,GAA2B,mBACtCD,EAAUE,EAAI,CACdC,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWM,SAtBoB,cAwBtCL,EAAUM,EAAI,CACdH,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWQ,SA/BoB,cAiCtCP,EAAUQ,EAAI,CACdL,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWU,SAtDoB,cAwDtCT,EAAUU,EAAI,CACdP,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWY,QA7EoB,cA+EtCX,EAAUY,EAAI,CACdT,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWc,MApGoB,cAsGtCb,EAAUc,EAAI,CACdX,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWgB,OA3HoB,cA6HtCf,EAAUgB,EAAI,CACdb,OAAQ,CACP,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CACC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGTC,MAAOL,EAAWkB,OApJoB,GAwJ3BC,EAAiBC,OAAOC,KAAKnB,GAAiBoB,O,OCjL9CC,EAAsB,SAACC,EAAmBC,GACtD,OAAO,IAAIC,MAAMF,GACfG,KACA,IAAID,MAAMD,GACRE,KAAK,CACLC,WAAW,EACXvB,MAAOL,EAAW6B,UAUjBC,EAA0B,CAC/BC,KAAMR,ECtBmB,GACG,IDsB5BS,WAAYT,ECvBa,GACG,KDyBhBU,EAAYC,YAAY,CACpCC,KAAM,OACNL,eACAM,SAAU,CACTC,OAAQ,SAACC,EAAkBC,GAC1B,OAAOA,EAAOC,YAKFH,EAAWJ,EAAUQ,QAArBJ,O,OEtBTP,EAA0B,CAC/BY,UAAU,EACVC,MAAO,EACPC,MAAO,EACPC,QAAQ,EACRC,eAAgB,GAChBC,MAAO,EACPC,aCrB4B,KDwBhBC,EAAYf,YAAY,CACpCC,KAAM,OACNL,eACAM,SAAU,CACTc,aAAc,SAACZ,EAAkBC,GAChC,IAAMY,EAAoBZ,EAAOC,QAEjC,OAAO,2BACHF,GADJ,IAECM,MAAON,EAAMM,MAAQO,EACrBL,eAAgBR,EAAMQ,eAAiBK,EACvCJ,MAAOT,EAAMS,MAAS,IAAMI,KAG9BC,MAAO,SAACd,GAKP,OAJsB,MAAlBA,EAAMe,UACTC,cAAchB,EAAMe,UAGd,2BACHf,GADJ,IAECe,cAAUE,EACVV,QAASP,EAAMO,UAGjBW,gBAAiB,SAAClB,EAAkBC,GAKnC,OAJsB,MAAlBD,EAAMe,UACTC,cAAchB,EAAMe,UAGd,2BACHf,GADJ,IAECe,SAAUd,EAAOC,c,EAMmCS,EAAUR,QAAnDW,E,EAAAA,MAAOF,E,EAAAA,aAAcM,E,EAAAA,gBEzDvBC,EAAevB,YAAY,CACvCC,KAAM,UACNL,aAJwC,KAKxCM,SAAU,CACTsB,KAAM,SAACpB,EAA2BC,GACjC,OAAa,MAATD,EACIA,EAGD,2BACHA,GADJ,IAECqB,SAAUpB,EAAOC,WAGnBoB,OAAQ,SAACtB,GACR,OAAa,MAATA,EACIA,EAGD,2BACHA,GADJ,IAECuB,aAAcvB,EAAMuB,YAAc,GAAK,KAGzCxB,OAAQ,SAACC,EAA2BC,GACnC,OAAsB,MAAlBA,EAAOC,QACHD,EAAOC,QAEPF,MAMEwB,EAAiBL,EAAahB,QCpC9BsB,EAAoB,WAOhC,MAL0B,CACzBC,KAFmBC,KAAKC,MAAMD,KAAKE,SAAWhD,GAG9C0C,YAAa,ICHT/B,EAA2BiC,IAEpBK,EAAYlC,YAAY,CACpCC,KAAM,OACNL,eACAM,SAAU,CACTC,OAAQ,WACP,OAAO0B,QAKGM,EAAcD,EAAU3B,QCXxB6B,EAAYpC,YAAY,CACpCC,KAAM,OACNL,aAJwC,KAKxCM,SAAU,CACTC,OAAQ,SAACC,EAA2BC,GACnC,OAAsB,MAAlBA,EAAOC,QACHD,EAAOC,QAEPF,MAMEiC,EAAcD,EAAU7B,QCRxB+B,EAAO,kBAAM,SAACC,EAAuBC,GAA+B,IAAD,EAC/CA,IAAxBC,EADuE,EACvEA,KAAMC,EADiE,EACjEA,QAASC,EADwD,EACxDA,KAEjBC,EAASH,EAAK3C,WAGpB,GAAe,MAAX4C,EACH,OAAOG,EAAQN,EAAUI,GAM1B,IAFqBG,EAAkBF,EAAQF,GAE5B,CAAC,IAAD,EACkBK,EAAmBN,EAAK5C,MAArDmD,EADW,EACXA,iBAAkBC,EADP,EACOA,QAQzB,OAPAV,EAASvB,EAAagC,IAMtBT,EAASpC,EAJoB,CAC5BN,KAAMoD,EACNnD,WAAYmD,KAGNJ,EAAQN,EAAUI,GAI1B,IAAMO,EAAuB,CAC5BrD,KAAMsD,EAAcP,EAAQF,GAC5B5C,WAAY8C,GAEbL,EAASpC,EAAO+C,IAGhB,IAAME,EAAkBV,EAAQjB,UAAY,CAAC4B,EAAG,EAAGC,EAAG,GAChDC,EAAsB,CAAEF,EAAGD,EAAgBC,EAAGC,EAAGF,EAAgBE,EAAI,GAC3E,OAAOf,EAASX,EAAeJ,KAAK+B,MAGxBC,EAAgB,SAACC,GAAD,OAAsB,SAAClB,EAAuBC,GAA+B,IAAD,EACxEA,IAAxBC,EADgG,EAChGA,KAAMC,EAD0F,EAC1FA,QAASC,EADiF,EACjFA,KAEjBC,EAASH,EAAK3C,WAGpB,GAAe,MAAX4C,EACH,OAAOG,EAAQN,EAAUI,GAI1B,IAAMS,EAAkBV,EAAQjB,UAAY,CAAC4B,EAAG,EAAGC,EAAG,GAChDC,EAAsB,CAAEF,EAAGD,EAAgBC,EAAII,EAAUH,EAAGF,EAAgBE,GAG5EI,EAAeZ,EAAkBF,EAAQ,CAC9Cd,KAAMY,EAAQZ,KACdH,YAAae,EAAQf,YACrBF,SAAU8B,IAGX,GAAKG,EAAL,CAIAnB,EAASX,EAAeJ,KAAK+B,IAG7B,IAAML,EAAuB,CAC5BrD,KAAO6D,EAA2BP,EAAcP,EAAQF,GAAlCD,EAAK5C,KAC3BC,WAAa4D,EAA2Bd,EAAZH,EAAK5C,MAElC0C,EAASpC,EAAO+C,OAqCJL,EAAU,SAACN,EAAuBI,GAE9C,OADAJ,EAASX,EAAezB,OAAOwC,IACxBJ,EAASJ,EAAYhC,WAGhBwD,EAAW,kBAAM,SAACpB,EAAuBC,GAA+B,IAAD,EACnDA,IAAxBE,EAD2E,EAC3EA,QAASkB,EADkE,EAClEA,KAAMjB,EAD4D,EAC5DA,KAEX,MAARiB,EACHrB,EAASX,EAAezB,OAAOyD,KAE/BrB,EAASX,EAAezB,OAAOwC,IAC/BJ,EAASJ,EAAYhC,WAGP,MAAXuC,GACHH,EAASF,EAAYlC,OAAOuC,MAIxBK,EAAqB,SAACN,GAQ3B,IAPA,IAAMQ,EAAUR,EAAKoB,QAAO,SAACC,GAAD,OAEqC,IAAhEA,EAAIC,WAAU,SAACC,GAAD,OAAWA,EAAM7F,QAAUL,EAAW6B,YAG/CsE,EPhJmB,GOgJehB,EAAQ7D,OAEvC8E,EAAI,EAAGA,EAAID,EAAoBC,IACvCjB,EAAQkB,QAAQ,IAAI3E,MPlJO,IOmJzBC,KAAK,CACLC,WAAW,EACXvB,MAAOL,EAAW6B,SAIrB,MAAO,CACNqD,iBAAkBiB,EAClBhB,QAASA,IAILmB,EAA0B,SAACC,GAChC,IACMnG,EADYF,EAAgBqG,EAAMvC,MACf5D,OAAOmG,EAAM1C,aAChCF,EAAW4C,EAAM5C,UAAY,CAAC4B,EAAG,EAAGC,EAAG,GACvCgB,EAA4B,GAalC,OAXApG,EAAOqG,SAAQ,SAACT,EAAKU,GACpBV,EAAIS,SAAQ,SAACE,EAAKC,GACL,IAARD,GACHH,EAAYK,KAAK,CAChBtB,EAAG5B,EAAS4B,EAAIqB,EAChBpB,EAAG7B,EAAS6B,EAAIkB,UAMbF,GAGFxB,EAAoB,SAACF,EAAwByB,GAClD,IADwE,EAClEO,EAAmBR,EAAwBC,GADuB,cAGjDO,GAHiD,IAGxE,2BAAyC,CAAC,IAAjCC,EAAgC,QAExC,GAAIA,EAAWxB,GPxLY,IOwLUwB,EAAWxB,EAAI,EAAG,OAAO,EAC9D,GAAIwB,EAAWvB,GP1LS,IO0LUuB,EAAWvB,EAAI,EAAG,OAAO,EAK3D,GAFsBV,EAAOiC,EAAWvB,GAAGuB,EAAWxB,GAEpClF,QAAUL,EAAW6B,MACtC,OAAO,GAZ+D,8BAgBxE,OAAO,GAGFwD,EAAgB,SAACP,EAAwByB,GAE9C,IAAMpB,EAA0B,GAmBhC,OAjBAL,EAAO2B,SAAQ,SAACT,GACf,IAAMgB,EAA2B,GACjChB,EAAIS,SAAQ,SAACP,GACZc,EAAWH,KAAKX,MAEjBf,EAAQ0B,KAAKG,MAGWV,EAAwBC,GAEhCE,SAAQ,SAACM,GACzB5B,EAAQ4B,EAAWvB,GAAGuB,EAAWxB,GAAK,CACrC3D,WAAW,EACXvB,MAAOH,EAAgBqG,EAAMvC,MAAM3D,UAI9B8E,GCnNF8B,EAAuC,CAC5CC,UAAW1C,EACX2C,UAAW,kBAAMzB,GAAe,IAChC0B,WAAY,kBAAM1B,EAAc,IAChC2B,QAAS,kBDuEaC,ECvEA,EDuEsB,SAAC7C,EAAuBC,GAA+B,IAAD,EAClEA,IAAxBC,EAD0F,EAC1FA,KAAMC,EADoF,EACpFA,QAASC,EAD2E,EAC3EA,KAEjBC,EAASH,EAAK3C,WAGpB,GAAe,MAAX4C,EACH,OAAOG,EAAQN,EAAUI,GAI1B,IAAMS,EAAkBV,EAAQjB,UAAY,CAAC4B,EAAG,EAAGC,EAAG,GAGhDI,EAAeZ,EAAkBF,EAAQ,CAC9Cd,KAAMY,EAAQZ,KACdH,aAAce,EAAQf,YAAcyD,GAAa,EACjD3D,SAAU2B,IAGX,GAAKM,EAAL,CAIAnB,EAASX,EAAeF,UAGxB,IAAMwB,EAAuB,CAC5BrD,KAAO6D,EAA2BP,EAAcP,EAAQF,GAAlCD,EAAK5C,KAC3BC,WAAa4D,EAA2Bd,EAAZH,EAAK5C,MAElC0C,EAASpC,EAAO+C,MA/BK,IAACkC,GCtEtB,IAAK,WACJC,QAAQC,IAAI,eAEbC,EAAGrE,EACHsE,EAAGtE,EACHuE,MAAO9B,GAGK+B,EAAiB,SAACC,GAAD,OAAgC,SAACpD,EAAuBC,GACrF,IAAMoD,EAAUb,EAAgBY,EAAME,KACtCD,GAAWrD,EAASqD,O,2BCJNE,EAZD,SAAC,GAAsC,IAApCpG,EAAmC,EAAnCA,UAAWvB,EAAwB,EAAxBA,MACrB4H,EAAa,CAClB,QACAjI,EAAW6B,QAAUxB,GAArB,iBAAwCL,EAAWK,GAAO6H,eAC1DtG,GAAa,kBACZmE,OAAQoC,SAAUC,KAAK,KAEzB,OACC,qBAAKC,UAAWJ,KCPZK,EAAO,SAAC,GAAuB,IAC9BC,EAD6B,EAArBxG,KACYyG,KAAI,SAACxC,EAAKyC,GACnC,IAAMC,EAAc1C,EAAIwC,KAAI,SAACtC,EAAOyC,GACnC,OACC,cAAC,EAAD,CAEC/G,UAAWsE,EAAMtE,UACjBvB,MAAO6F,EAAM7F,OAHd,gBACeoI,EADf,YACwBE,OAO1B,OACC,qBAAKN,UAAU,YAAf,SACEK,GADF,mBAA4CD,OAM9C,OACC,qBAAKJ,UAAU,OAAf,SACEE,KAKSK,EAAgB,WAC5B,IAAMjE,EAAOkE,aAAY,SAACvG,GAAD,OAAsBA,EAAMqC,QAErD,OACC,cAAC,EAAD,CAAM5C,KAAM4C,EAAK5C,QCJb+G,G,YAAa,SAAC1I,GACnB,IAAM2I,EAA4B,GAC5BC,EAA+B,IAAjB5I,EAAO,GAAG,IAA6B,IAAjBA,EAAO,GAAG,GAC9C6I,EAA+C,IAAlC7I,EAAO,GAAGA,EAAO,GAAGkB,OAAO,IAA8C,IAAlClB,EAAO,GAAGA,EAAO,GAAGkB,OAAO,GAcrF,OAZAlB,EAAOqG,SAAQ,SAACT,GACf,IAAMkD,EAA6B,GACnClD,EAAIS,SAAQ,SAACP,EAAOiD,GACJ,IAAVA,GAAgBH,GAAiBG,IAAUnD,EAAI1E,OAAO,GAAM2H,GAChEC,EAAiBrC,KAAKX,MAGxB6C,EAAclC,KAAKqC,MAKbH,IAGOK,EAlDD,SAAC,GAA+C,IAA9CpF,EAA6C,EAA7CA,KAAMH,EAAuC,EAAvCA,YAAuC,EAA1BF,SAClC,GAAY,MAARK,EACH,OAAO,wBAGR,IAEMqF,EAFSP,EAAW5I,EAAgB8D,GAAM5D,OAAOyD,IAE1B2E,KAAI,SAACxC,EAAKyC,GACtC,IAAMC,EAAc1C,EAAIwC,KAAI,SAACc,EAAUX,GACtC,OACC,cAAC,EAAD,CAEC/G,WAAW,EACXvB,MAAOiJ,EAAUpJ,EAAgB8D,GAAM3D,MAAQL,EAAW6B,OAH3D,sBACqB4G,EADrB,YAC8BE,OAOhC,OACC,qBAAKN,UAAU,aAAf,SACEK,GADF,oBAA8CD,OAMhD,OACC,qBAAKJ,UAAU,QAAf,SAAwBgB,KCjBpBE,EAAc,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOjD,EAA4C,EAA5CA,MAAOkD,EAAqC,EAArCA,aACpC,OACC,sBAAKA,aAAcA,EAAcpB,UAAU,eAA3C,UACC,4BAAImB,IACHjD,GAAS,cAAC,EAAD,eAAWA,QAKXmD,GAAkB,WAC9B,IAAM7E,EAAOgE,aAAY,SAACvG,GAAD,OAAsBA,EAAMuC,QAErD,OACC,cAAC,EAAD,CAAa2E,MAAM,OAAOjD,MAAO1B,KAItB8E,GAAkB,WAC9B,IAAM7D,EAAO+C,aAAY,SAACvG,GAAD,OAAsBA,EAAMwD,QAC/CrB,EAAWmF,cAEjB,OACC,cAAC,EAAD,CACCJ,MAAM,OACNjD,MAAOT,EACP2D,aAAc,SAAC5B,GAAD,OAAWpD,GJZkD,SAACA,EAAuBC,GACrGD,EAASoB,YKxBJgE,I,MAAO,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,MACtB,OACC,sBAAK1B,UAAU,OAAf,UACC,kCAAQyB,EAAR,QACA,+BAAOC,SAgBKC,GAXG,WACjB,IAAMC,EAAOpB,aAAY,SAACvG,GAAD,OAAsBA,EAAM2H,QACrD,OACC,sBAAK5B,UAAU,uBAAf,UACC,cAAC,GAAD,CAAMyB,MAAM,QAAQC,MAAOE,EAAKtH,QAChC,cAAC,GAAD,CAAMmH,MAAM,QAAQC,MAAOE,EAAKlH,QAChC,cAAC,GAAD,CAAM+G,MAAM,QAAQC,MAAOE,EAAKrH,YC4BpBsH,I,MA9BE,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,SAAUnH,EAAkC,EAAlCA,aACvBoH,EAAkBvB,aAAY,SAACvG,GAAD,OAAsBA,EAAM2H,KAAK5G,YAE/DoB,EAAWmF,cAajB,OAXAS,qBAAU,WACT,GAAuB,MAAnBD,EAAyB,CAC5B,IAAM/G,EAAWiH,aAAY,WAC5B7F,EAASD,OACPxB,GAEHyB,EAASjB,EAAgBH,OAGxB,CAACoB,EAAUzB,EAAcmH,IAG3B,eAAC,IAAMI,SAAP,WACC,qBAAKlC,UAAU,kBAAf,SACC,cAAC,EAAD,MAED,sBAAKA,UAAU,sBAAf,UACC,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,YC1BWmC,GAXG,WACjB,IAAM/F,EAAWmF,cAEjB,OACC,sBAAKa,UAAW,SAAC5C,GAAD,OAAWpD,EAASmD,EAAeC,KAAS6C,UAAW,EAAvE,kBAEC,wBAAQC,QAAS,kBAAMlG,EAASxB,EAAUR,QAAQW,UAAlD,uBCuBYwH,GAvBI,WAClB,IAAMT,EAAWtB,aAAY,SAACvG,GAAD,OAAsBA,EAAM2H,KAAKpH,UACxDG,EAAe6F,aAAY,SAACvG,GAAD,OAAsBA,EAAM2H,KAAKjH,gBAE5DyB,EAAWmF,cAEjB,OACC,sBAAKvB,UAAU,cAAcoC,UAAW,SAAC5C,GAAD,OAAWpD,EAASmD,EAAeC,KAAS6C,UAAW,EAA/F,UACC,qBAAKrC,UAAU,qBAAf,oBACA,qBAAKA,UAAU,uBAAf,SAEE8B,EACC,cAAC,GAAD,IACE,cAAC,GAAD,CACDA,SAAUA,EACVnH,aAAcA,UCLN6H,OAff,WACC,OACC,sBAAKxC,UAAU,MAAf,UACC,cAAC,IAAD,CAAYyC,SAAS,IAArB,SACC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,GAAD,UAG3B,yBAAQ3C,UAAU,cAAlB,iCACuB,mBAAG4C,KAAK,8CAA8CC,OAAO,SAASC,IAAI,aAA1E,gCCPbC,GAAQC,YAAe,CACnCC,QAAS,CACR3G,KAAM1C,EAAUqJ,QAChBrB,KAAMhH,EAAUqI,QAChB1G,QAASnB,EAAa6H,QACtBxF,KAAMxB,EAAUgH,QAChBzG,KAAMT,EAAUkH,WCNlBC,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,GAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.05addbfc.chunk.js","sourcesContent":["export enum BlockColor {\n\tEmpty,\n\tRed,\n\tGreen,\n\tBlue,\n\tPurple,\n\tYellow,\n\tTeal,\n\tOrange\n}\n\nexport enum ShapeType {\n\tI,\n\tO,\n\tT,\n\tS,\n\tZ,\n\tJ,\n\tL\n}\n\nexport interface ShapeData {\n\tbitmap: number[][][],\n\tcolor: BlockColor\n}\n\nexport interface ShapesData {\n\t[index: number]: ShapeData\n}\n\nexport const availableShapes: ShapesData = {\n\t[ShapeType.L]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Orange\n\t},\n\t[ShapeType.O]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Yellow\n\t},\n\t[ShapeType.T]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Purple\n\t},\n\t[ShapeType.S]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Green\n\t},\n\t[ShapeType.Z]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Red\n\t},\n\t[ShapeType.J]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Blue\n\t},\n\t[ShapeType.I]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,1,1,1],\n\t\t\t\t[0,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,1],\n\t\t\t\t[0,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Teal\n\t},\n}\n\nexport const totalNumShapes = Object.keys(availableShapes).length\n","import {BlockProps} from '../../components/block/block'\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {BlockColor} from '../../data/shapes'\nimport {TOTAL_COLUMNS, TOTAL_ROWS} from '../../data/grid'\n\nexport const generateInitialGrid = (numOfRows: number, numOfColumns: number) => {\n\treturn new Array(numOfRows)\n\t\t.fill(\n\t\t\tnew Array(numOfColumns)\n\t\t\t\t.fill({\n\t\t\t\t\tisGhosted: false,\n\t\t\t\t\tcolor: BlockColor.Empty\n\t\t\t\t})\n\t\t)\n}\n\nexport interface GridState {\n\trows: BlockProps[][],\n\tgutterRows: BlockProps[][]\n}\n\nconst initialState: GridState = {\n\trows: generateInitialGrid(TOTAL_ROWS, TOTAL_COLUMNS),\n\tgutterRows: generateInitialGrid(TOTAL_ROWS, TOTAL_COLUMNS)\n}\n\nexport const gridSlice = createSlice({\n\tname: 'grid',\n\tinitialState,\n\treducers: {\n\t\tupdate: (state: GridState, action: PayloadAction<GridState>) => {\n\t\t\treturn action.payload\n\t\t}\n\t}\n})\n\nexport const { update } = gridSlice.actions\n","export const TOTAL_ROWS = 20\nexport const TOTAL_COLUMNS = 10\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {TICK_INTERVAL} from '../../data/game'\n\nexport interface GameState {\n\tgameOver: boolean,\n\tinterval?: NodeJS.Timeout,\n\tlevel: number,\n\tlines: number,\n\tpaused: boolean,\n\tremainingLines: number,\n\tscore: number,\n\ttickInterval: number\n}\n\nconst initialState: GameState = {\n\tgameOver: false,\n\tlevel: 1,\n\tlines: 0,\n\tpaused: true,\n\tremainingLines: 10,\n\tscore: 0,\n\ttickInterval: TICK_INTERVAL\n}\n\nexport const gameSlice = createSlice({\n\tname: 'game',\n\tinitialState,\n\treducers: {\n\t\tremovedLines: (state: GameState, action: PayloadAction<number>) => {\n\t\t\tconst countRemovedLines = action.payload\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlines: state.lines + countRemovedLines,\n\t\t\t\tremainingLines: state.remainingLines - countRemovedLines,\n\t\t\t\tscore: state.score + (100 * countRemovedLines)\n\t\t\t}\n\t\t},\n\t\tpause: (state: GameState) => {\n\t\t\tif (state.interval != null) {\n\t\t\t\tclearInterval(state.interval) // TODO: figure out where to put this since this is a side effect\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinterval: undefined,\n\t\t\t\tpaused: !state.paused\n\t\t\t}\n\t\t},\n\t\tcreatedInterval: (state: GameState, action: PayloadAction<NodeJS.Timeout>) => {\n\t\t\tif (state.interval != null) {\n\t\t\t\tclearInterval(state.interval) // TODO: figure out where to put this since this is a side effect\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinterval: action.payload\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const { pause, removedLines, createdInterval } = gameSlice.actions\n","export const TICK_INTERVAL = 1000 // 1 second\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {Coordinate, NullableShapeState, ShapeProps} from './shape-types'\n\nconst initialState: NullableShapeState = null as NullableShapeState\n\nexport const currentSlice = createSlice({\n\tname: 'current',\n\tinitialState,\n\treducers: {\n\t\tmove: (state: NullableShapeState, action: PayloadAction<Coordinate>) => {\n\t\t\tif (state == null) {\n\t\t\t\treturn state\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposition: action.payload\n\t\t\t}\n\t\t},\n\t\trotate: (state: NullableShapeState) => {\n\t\t\tif (state == null) {\n\t\t\t\treturn state\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\torientation: (state.orientation + 1) % 4\n\t\t\t}\n\t\t},\n\t\tupdate: (state: NullableShapeState, action: PayloadAction<ShapeProps>) => {\n\t\t\tif (action.payload != null) {\n\t\t\t\treturn action.payload\n\t\t\t} else {\n\t\t\t\treturn state\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const currentActions = currentSlice.actions\n","import {totalNumShapes} from '../../data/shapes'\nimport {ShapeProps} from './shape-types'\n\nexport const generateNextShape = () => {\n\tconst shapeTypeId = Math.floor(Math.random() * totalNumShapes)\n\tconst shape: ShapeProps = {\n\t\ttype: shapeTypeId,\n\t\torientation: 0\n\t}\n\n\treturn shape\n}\n","import {createSlice} from '@reduxjs/toolkit'\nimport {ShapeProps} from './shape-types'\nimport {generateNextShape} from './shape-generator'\n\nconst initialState: ShapeProps = generateNextShape()\n\nexport const nextSlice = createSlice({\n\tname: 'next',\n\tinitialState,\n\treducers: {\n\t\tupdate: () => {\n\t\t\treturn generateNextShape() // TODO: fix this\n\t\t}\n\t}\n})\n\nexport const nextActions = nextSlice.actions\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {NullableShapeState, ShapeProps} from './shape-types'\n\nconst initialState: NullableShapeState = null as NullableShapeState\n\nexport const holdSlice = createSlice({\n\tname: 'hold',\n\tinitialState,\n\treducers: {\n\t\tupdate: (state: NullableShapeState, action: PayloadAction<ShapeProps>) => {\n\t\t\tif (action.payload != null) {\n\t\t\t\treturn action.payload\n\t\t\t} else {\n\t\t\t\treturn state\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const holdActions = holdSlice.actions\n","import {AppDispatch, RootState} from '../../state/store'\nimport {BlockProps} from '../../components/block/block'\nimport {availableShapes, BlockColor} from '../../data/shapes'\nimport {GridState, update} from '../../state/grid/grid-slice'\nimport {TOTAL_COLUMNS, TOTAL_ROWS} from '../../data/grid'\nimport {removedLines} from '../../state/game/game-slice'\nimport {Coordinate, ShapeProps} from '../../state/shapes/shape-types'\nimport {currentActions} from '../../state/shapes/current-slice'\nimport {nextActions} from '../../state/shapes/next-slice'\nimport {holdActions} from '../../state/shapes/hold-slice'\n\nexport const tick = () => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, current)\n\n\tif (!canShapeMove) {\n\t\tconst {rowsRemovedCount, newGrid} = removeCompleteRows(grid.rows)\n\t\tdispatch(removedLines(rowsRemovedCount))\n\n\t\tconst gridState: GridState = {\n\t\t\trows: newGrid,\n\t\t\tgutterRows: newGrid\n\t\t}\n\t\tdispatch(update(gridState))\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: renderNewGrid(gutter, current),\n\t\tgutterRows: gutter\n\t}\n\tdispatch(update(gridState))\n\n\t// move down one\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst incrementedPosition = { x: currentPosition.x, y: currentPosition.y + 1 }\n\treturn dispatch(currentActions.move(incrementedPosition))\n}\n\nexport const moveToTheSide = (movement: number) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// move left/right\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst incrementedPosition = { x: currentPosition.x + movement, y: currentPosition.y }\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, {\n\t\ttype: current.type,\n\t\torientation: current.orientation,\n\t\tposition: incrementedPosition\n\t})\n\n\tif (!canShapeMove) {\n\t\treturn\n\t}\n\n\tdispatch(currentActions.move(incrementedPosition))\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: !canShapeMove ? grid.rows : renderNewGrid(gutter, current),\n\t\tgutterRows: !canShapeMove ? grid.rows : gutter\n\t}\n\tdispatch(update(gridState))\n}\n\nexport const rotate = (increment: number) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// move left/right\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, {\n\t\ttype: current.type,\n\t\torientation: (current.orientation + increment) % 4,\n\t\tposition: currentPosition\n\t})\n\n\tif (!canShapeMove) {\n\t\treturn\n\t}\n\n\tdispatch(currentActions.rotate())\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: !canShapeMove ? grid.rows : renderNewGrid(gutter, current),\n\t\tgutterRows: !canShapeMove ? grid.rows : gutter\n\t}\n\tdispatch(update(gridState))\n}\n\nexport const useNext = (dispatch: AppDispatch, next: ShapeProps) => {\n\tdispatch(currentActions.update(next))\n\treturn dispatch(nextActions.update())\n}\n\nexport const swapHold = () => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { current, hold, next } = getState()\n\n\tif (hold != null) {\n\t\tdispatch(currentActions.update(hold))\n\t} else {\n\t\tdispatch(currentActions.update(next))\n\t\tdispatch(nextActions.update())\n\t}\n\n\tif (current != null) {\n\t\tdispatch(holdActions.update(current))\n\t}\n}\n\nconst removeCompleteRows = (grid: BlockProps[][]) => {\n\tconst newGrid = grid.filter((row) =>\n\t\t// row is not complete\n\t\trow.findIndex((block) => block.color === BlockColor.Empty) !== -1\n\t)\n\n\tconst completedRowsCount = TOTAL_ROWS - newGrid.length\n\n\tfor (let i = 0; i < completedRowsCount; i++) {\n\t\tnewGrid.unshift(new Array(TOTAL_COLUMNS)\n\t\t\t.fill({\n\t\t\t\tisGhosted: false,\n\t\t\t\tcolor: BlockColor.Empty\n\t\t\t}))\n\t}\n\n\treturn {\n\t\trowsRemovedCount: completedRowsCount,\n\t\tnewGrid: newGrid\n\t}\n}\n\nconst computeShapeCoordinates = (shape: ShapeProps) => {\n\tconst shapeData = availableShapes[shape.type]\n\tconst bitmap = shapeData.bitmap[shape.orientation]\n\tconst position = shape.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst coordinates: Coordinate[] = []\n\n\tbitmap.forEach((row, yIx) => {\n\t\trow.forEach((bit, xIx) => {\n\t\t\tif (bit === 1) {\n\t\t\t\tcoordinates.push({\n\t\t\t\t\tx: position.x + xIx,\n\t\t\t\t\ty: position.y + yIx\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t})\n\n\treturn coordinates\n}\n\nconst checkCanShapeMove = (gutter: BlockProps[][], shape: ShapeProps) => {\n\tconst shapeCoordinates = computeShapeCoordinates(shape)\n\n\tfor (let coordinate of shapeCoordinates) {\n\t\t// check if in bounds\n\t\tif (coordinate.x >= TOTAL_COLUMNS || coordinate.x < 0) return false\n\t\tif (coordinate.y >= TOTAL_ROWS || coordinate.y < 0) return false\n\n\t\t// check if block exists\n\t\tconst existingBlock = gutter[coordinate.y][coordinate.x]\n\n\t\tif (existingBlock.color !== BlockColor.Empty) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nconst renderNewGrid = (gutter: BlockProps[][], shape: ShapeProps) => {\n\t// copy existing gutter\n\tconst newGrid: BlockProps[][] = []\n\n\tgutter.forEach((row) => {\n\t\tconst newGridRow: BlockProps[] = []\n\t\trow.forEach((block) => {\n\t\t\tnewGridRow.push(block)\n\t\t})\n\t\tnewGrid.push(newGridRow)\n\t})\n\n\tconst shapeCoordinates = computeShapeCoordinates(shape)\n\n\tshapeCoordinates.forEach((coordinate) => {\n\t\tnewGrid[coordinate.y][coordinate.x] = {\n\t\t\tisGhosted: false,\n\t\t\tcolor: availableShapes[shape.type].color\n\t\t}\n\t})\n\n\treturn newGrid\n}\n","import React from 'react'\nimport {moveToTheSide, rotate, swapHold, tick} from '../game-controller/game-controller'\nimport {AppDispatch, RootState} from '../../state/store'\nimport {pause} from '../../state/game/game-slice'\n\ninterface KeyPressHandlerType {\n\t[index: string]: () => any\n}\n\nconst keyPressHandler: KeyPressHandlerType = {\n\tArrowDown: tick, // drop soft\n\tArrowLeft: () => moveToTheSide(-1), // move left\n\tArrowRight: () => moveToTheSide(1), // move right\n\tArrowUp: () => rotate(1), // rotate\n\t' ': () => {\n\t\tconsole.log('drop: hard')\n\t}, // hard drop\n\tp: pause,\n\tP: pause,\n\tShift: swapHold // hold\n}\n\nexport const handleKeyPress = (event: React.KeyboardEvent) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst handler = keyPressHandler[event.key]\n\thandler && dispatch(handler())\n}\n\nexport const handleOnTouchHoldContainer = (onTouchEvent: React.TouchEvent) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tdispatch(swapHold())\n}\n","import './block.scss'\nimport {BlockColor} from '../../data/shapes'\n\nexport interface BlockProps {\n\tisGhosted: boolean,\n\tcolor: BlockColor\n}\n\nconst Block = ({ isGhosted, color }: BlockProps) => {\n\tconst classNames = [\n\t\t'block',\n\t\tBlockColor.Empty !== color && `block--${BlockColor[color].toLowerCase()}`,\n\t\tisGhosted && 'block--ghosted'\n\t].filter( Boolean ).join(' ')\n\n\treturn (\n\t\t<div className={classNames}/>\n\t)\n}\n\nexport default Block\n","import './grid.scss'\nimport Block, {BlockProps} from '../block/block'\nimport {useSelector} from 'react-redux'\nimport {RootState} from '../../state/store'\n\ninterface GridProps {\n\trows: BlockProps[][]\n}\n\nconst Grid = ({rows}: GridProps) => {\n\tconst gridContents = rows.map((row, rowIx) => {\n\t\tconst renderedRow = row.map((block, columnIx) => {\n\t\t\treturn (\n\t\t\t\t<Block\n\t\t\t\t\tkey={`block-${rowIx}-${columnIx}`}\n\t\t\t\t\tisGhosted={block.isGhosted}\n\t\t\t\t\tcolor={block.color}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className=\"grid__row\" key={`grid-row-${rowIx}`}>\n\t\t\t\t{renderedRow}\n\t\t\t</div>\n\t\t)\n\t})\n\n\treturn (\n\t\t<div className=\"grid\">\n\t\t\t{gridContents}\n\t\t</div>\n\t)\n}\n\nexport const GridContainer = () => {\n\tconst grid = useSelector((state: RootState) => state.grid)\n\n\treturn (\n\t\t<Grid rows={grid.rows}/>\n\t)\n}\n\nexport default Grid\n","import Block from '../block/block'\nimport {availableShapes, BlockColor} from '../../data/shapes'\nimport './shape.scss'\nimport {ShapeProps} from '../../state/shapes/shape-types'\n\nconst Shape = ({type, orientation, position}: ShapeProps) => {\n\tif (type == null) {\n\t\treturn <div/>\n\t}\n\n\tconst bitmap = trimBitmap(availableShapes[type].bitmap[orientation])\n\n\tconst renderedShape = bitmap.map((row, rowIx) => {\n\t\tconst renderedRow = row.map((isFilled, columnIx) => {\n\t\t\treturn (\n\t\t\t\t<Block\n\t\t\t\t\tkey={`shape-block-${rowIx}-${columnIx}`}\n\t\t\t\t\tisGhosted={false}\n\t\t\t\t\tcolor={isFilled? availableShapes[type].color : BlockColor.Empty}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className='shape__row' key={`shape-row-${rowIx}`}>\n\t\t\t\t{renderedRow}\n\t\t\t</div>\n\t\t)\n\t})\n\n\treturn (\n\t\t<div className='shape'>{renderedShape}</div>\n\t)\n}\n\nconst trimBitmap = (bitmap: number[][]) => {\n\tconst trimmedBitmap: number[][] = []\n\tconst removeFirst = bitmap[0][0] === 0 && bitmap[1][0] === 0\n\tconst removeLast = bitmap[0][bitmap[0].length-1] === 0 && bitmap[1][bitmap[0].length-1] === 0\n\n\tbitmap.forEach((row) => {\n\t\tconst trimmedBitmapRow: number[] = []\n\t\trow.forEach((block, index) => {\n\t\t\tif ((index !== 0 || !removeFirst) && (index !== row.length-1 || !removeLast)) {\n\t\t\t\ttrimmedBitmapRow.push(block)\n\t\t\t}\n\t\t})\n\t\ttrimmedBitmap.push(trimmedBitmapRow)\n\t})\n\n\n\n\treturn trimmedBitmap\n}\n\nexport default Shape\n","import './shape-window.scss'\nimport Shape from \"../shape/shape\";\nimport {TouchEventHandler} from 'react'\nimport {NullableShapeState} from '../../state/shapes/shape-types'\nimport {handleOnTouchHoldContainer} from '../../controller/input-controller/input-controller'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {RootState} from '../../state/store'\n\nexport interface ShapeWindowProps {\n\tonTouchStart?: TouchEventHandler | undefined,\n\ttitle: string,\n\tshape: NullableShapeState\n}\n\nconst ShapeWindow = ({ title, shape, onTouchStart }: ShapeWindowProps) => {\n\treturn (\n\t\t<div onTouchStart={onTouchStart} className='shape-window'>\n\t\t\t<p>{title}</p>\n\t\t\t{shape && <Shape {...shape} /> }\n\t\t</div>\n\t)\n}\n\nexport const NextShapeWindow = () => {\n\tconst next = useSelector((state: RootState) => state.next)\n\n\treturn (\n\t\t<ShapeWindow title='Next' shape={next} />\n\t)\n}\n\nexport const HoldShapeWindow = () => {\n\tconst hold = useSelector((state: RootState) => state.hold)\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<ShapeWindow\n\t\t\ttitle='Hold'\n\t\t\tshape={hold}\n\t\t\tonTouchStart={(event) => dispatch(handleOnTouchHoldContainer(event))}\n\t\t/>\n\t)\n}\n\nexport default ShapeWindow\n","import './stats-view.scss'\nimport {useSelector} from 'react-redux'\nimport {RootState} from '../../state/store'\n\nconst Stat = ({ label, value }: { label: string, value: number }) => {\n\treturn (\n\t\t<div className='stat'>\n\t\t\t<label>{label}: </label>\n\t\t\t<span>{value}</span>\n\t\t</div>\n\t)\n}\n\nconst StatsView = () => {\n\tconst game = useSelector((state: RootState) => state.game)\n\treturn (\n\t\t<div className='stats-view-container'>\n\t\t\t<Stat label='Level' value={game.level} />\n\t\t\t<Stat label='Score' value={game.score} />\n\t\t\t<Stat label='Lines' value={game.lines} />\n\t\t</div>\n\t)\n}\n\nexport default StatsView\n","import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {GridContainer} from '../../components/grid/grid'\nimport {HoldShapeWindow, NextShapeWindow} from '../../components/shape-window/shape-window'\nimport {tick} from '../../controller/game-controller/game-controller'\nimport StatsView from '../stats-view/stats-view'\n\nimport './game-view.scss'\nimport {createdInterval} from '../../state/game/game-slice'\nimport {RootState} from '../../state/store'\n\ninterface GameViewProps {\n\tisPaused: boolean,\n\ttickInterval: number\n}\n\nconst GameView = ({ isPaused, tickInterval }: GameViewProps) => {\n\tconst currentInterval = useSelector((state: RootState) => state.game.interval)\n\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tif (currentInterval == null) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tdispatch(tick())\n\t\t\t}, tickInterval)\n\n\t\t\tdispatch(createdInterval(interval))\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [dispatch, tickInterval, isPaused])\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"game-view__grid\">\n\t\t\t\t<GridContainer />\n\t\t\t</div>\n\t\t\t<div className=\"game-view__side-bar\">\n\t\t\t\t<NextShapeWindow />\n\t\t\t\t<HoldShapeWindow />\n\t\t\t\t<StatsView />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default GameView\n","import {handleKeyPress} from '../../controller/input-controller/input-controller'\nimport {useDispatch} from 'react-redux'\nimport {gameSlice} from '../../state/game/game-slice'\n\nconst PauseView = () => {\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<div onKeyDown={(event) => dispatch(handleKeyPress(event))} tabIndex={-1}>\n\t\t\tPause\n\t\t\t<button onClick={() => dispatch(gameSlice.actions.pause())}>Start</button>\n\t\t</div>\n\t)\n}\n\nexport default PauseView\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {handleKeyPress} from '../../controller/input-controller/input-controller'\nimport {RootState} from '../../state/store'\n\nimport './tetris-page.scss'\nimport GameView from '../../views/game-view/game-view'\nimport PauseView from '../../views/pause-view/pause-view'\n\nconst TetrisPage = () => {\n\tconst isPaused = useSelector((state: RootState) => state.game.paused)\n\tconst tickInterval = useSelector((state: RootState) => state.game.tickInterval)\n\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<div className=\"tetris-page\" onKeyDown={(event) => dispatch(handleKeyPress(event))} tabIndex={-1}>\n\t\t\t<div className=\"tetris-page__title\">Tetris</div>\n\t\t\t<div className=\"tetris-page__content\">\n\t\t\t\t{\n\t\t\t\t\tisPaused ?\n\t\t\t\t\t\t<PauseView/>\n\t\t\t\t\t\t: <GameView\n\t\t\t\t\t\t\tisPaused={isPaused}\n\t\t\t\t\t\t\ttickInterval={tickInterval}\n\t\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default TetrisPage\n","import React from 'react'\nimport './App.scss'\nimport {HashRouter, Route, Routes} from 'react-router-dom'\nimport TetrisPage from './pages/tetris/tetris-page'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<HashRouter basename=\"/\">\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/\" element={<TetrisPage />} />\n\t\t\t\t</Routes>\n\t\t\t</HashRouter>\n\t\t\t<footer className='app__footer'>\n\t\t\t\tmade with &hearts; by <a href='https://github.com/leahferrell/tetris-react' target='_blank' rel=\"noreferrer\">leahferrell</a>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import {configureStore} from '@reduxjs/toolkit'\nimport {gridSlice} from './grid/grid-slice'\nimport {gameSlice} from './game/game-slice'\nimport {currentSlice} from './shapes/current-slice'\nimport {holdSlice} from './shapes/hold-slice'\nimport {nextSlice} from './shapes/next-slice'\n\nexport const store = configureStore({\n\treducer: {\n\t\tgrid: gridSlice.reducer,\n\t\tgame: gameSlice.reducer,\n\t\tcurrent: currentSlice.reducer,\n\t\thold: holdSlice.reducer,\n\t\tnext: nextSlice.reducer\n\t}\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './state/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}