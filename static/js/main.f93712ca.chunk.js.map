{"version":3,"sources":["data/shapes.ts","components/block/block.tsx","components/shape/shape.tsx","components/shape-window/shape-window.tsx","state/grid/grid-generator.ts","state/grid/grid-slice.ts","data/grid.ts","state/game/game-slice.ts","data/game.ts","state/shapes/current-slice.ts","state/shapes/shape-generator.ts","state/shapes/next-slice.ts","state/shapes/hold-slice.ts","controllers/game-controller/game-controller.ts","containers/shape-window/shape-window.tsx","controllers/input-controller/touch-controller.ts","components/grid/grid.tsx","containers/grid-container/grid-container.tsx","containers/stats-view/stats-view.tsx","containers/game-view/game-view.tsx","controllers/input-controller/key-press-controller.ts","containers/pause-view/pause-view.tsx","pages/tetris/tetris-page.tsx","App.tsx","state/store.ts","index.tsx"],"names":["BlockColor","ShapeType","availableShapes","L","bitmap","color","Orange","O","Yellow","T","Purple","S","Green","Z","Red","J","Blue","I","Teal","totalNumShapes","Object","keys","length","Block","isGhosted","classNames","Empty","toLowerCase","filter","Boolean","join","className","trimBitmap","trimmedBitmap","removeFirst","removeLast","forEach","row","trimmedBitmapRow","block","index","push","Shape","type","orientation","renderedShape","map","rowIx","renderedRow","isFilled","columnIx","ShapeWindow","title","shape","onTouchStart","generateInitialGrid","numOfRows","numOfColumns","Array","fill","generateEmptyRow","initialState","rows","gutterRows","gridSlice","createSlice","name","reducers","update","state","action","payload","actions","gameOver","level","lines","paused","remainingLines","score","tickInterval","gameSlice","removedLines","countRemovedLines","pause","interval","clearInterval","undefined","createdInterval","currentSlice","move","position","rotate","currentActions","generateNextShape","Math","floor","random","nextSlice","nextActions","holdSlice","holdActions","tick","dispatch","getState","grid","current","next","gutter","useNext","checkCanShapeMove","removeCompleteRows","rowsRemovedCount","newGrid","gridState","renderNewGrid","currentPosition","x","y","incrementedPosition","moveToTheSide","movement","canShapeMove","swapHold","hold","findIndex","completedRowsCount","i","unshift","computeShapeCoordinates","coordinates","yIx","bit","xIx","shapeCoordinates","coordinate","newGridRow","NextShapeWindow","useSelector","HoldShapeWindow","useDispatch","event","Grid","gridContents","GridContainer","Stat","label","value","StatsView","game","GameView","isPaused","currentInterval","useEffect","setInterval","Fragment","keyPressHandler","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","increment","console","log","p","P","Shift","handleKeyPress","handler","key","PauseView","onKeyDown","tabIndex","onClick","TetrisPage","App","basename","path","element","href","target","rel","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f93712ca.chunk.js","sourcesContent":["export enum BlockColor {\n\tEmpty,\n\tRed,\n\tGreen,\n\tBlue,\n\tPurple,\n\tYellow,\n\tTeal,\n\tOrange\n}\n\nexport enum ShapeType {\n\tI,\n\tO,\n\tT,\n\tS,\n\tZ,\n\tJ,\n\tL\n}\n\nexport interface ShapeData {\n\tbitmap: number[][][],\n\tcolor: BlockColor\n}\n\nexport interface ShapesData {\n\t[index: number]: ShapeData\n}\n\nexport const availableShapes: ShapesData = {\n\t[ShapeType.L]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Orange\n\t},\n\t[ShapeType.O]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Yellow\n\t},\n\t[ShapeType.T]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Purple\n\t},\n\t[ShapeType.S]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[1,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Green\n\t},\n\t[ShapeType.Z]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,1,1,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Red\n\t},\n\t[ShapeType.J]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,1,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,0,0],\n\t\t\t\t[1,0,0,0],\n\t\t\t\t[1,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,1,1,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Blue\n\t},\n\t[ShapeType.I]: {\n\t\tbitmap: [\n\t\t\t[\n\t\t\t\t[1,1,1,1],\n\t\t\t\t[0,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0],\n\t\t\t\t[0,0,1,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[1,1,1,1],\n\t\t\t\t[0,0,0,0]\n\t\t\t],\n\t\t\t[\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0],\n\t\t\t\t[0,1,0,0]\n\t\t\t]\n\t\t],\n\t\tcolor: BlockColor.Teal\n\t},\n}\n\nexport const totalNumShapes = Object.keys(availableShapes).length\n","import {BlockColor} from '../../data/shapes'\n\nimport './block.scss'\n\nexport interface BlockProps {\n\tisGhosted: boolean,\n\tcolor: BlockColor\n}\n\nconst Block = ({ isGhosted, color }: BlockProps) => {\n\tconst classNames = [\n\t\t'block',\n\t\tBlockColor.Empty !== color && `block--${BlockColor[color].toLowerCase()}`,\n\t\tisGhosted && 'block--ghosted'\n\t].filter( Boolean ).join(' ')\n\n\treturn (\n\t\t<div className={classNames}/>\n\t)\n}\n\nexport default Block\n","import {availableShapes, BlockColor, ShapeType} from '../../data/shapes'\nimport Block from '../block/block'\n\nimport './shape.scss'\n\nexport interface ShapeProps {\n\ttype: ShapeType,\n\torientation: number\n}\n\nconst Shape = ({type, orientation}: ShapeProps) => {\n\tif (type == null) {\n\t\treturn <div/>\n\t}\n\n\tconst bitmap = trimBitmap(availableShapes[type].bitmap[orientation])\n\n\tconst renderedShape = bitmap.map((row, rowIx) => {\n\t\tconst renderedRow = row.map((isFilled, columnIx) => {\n\t\t\treturn (\n\t\t\t\t<Block\n\t\t\t\t\tkey={`shape-block-${rowIx}-${columnIx}`}\n\t\t\t\t\tisGhosted={false}\n\t\t\t\t\tcolor={isFilled? availableShapes[type].color : BlockColor.Empty}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className='shape__row' key={`shape-row-${rowIx}`}>\n\t\t\t\t{renderedRow}\n\t\t\t</div>\n\t\t)\n\t})\n\n\treturn (\n\t\t<div className='shape'>{renderedShape}</div>\n\t)\n}\n\nconst trimBitmap = (bitmap: number[][]) => {\n\tconst trimmedBitmap: number[][] = []\n\tconst removeFirst = bitmap[0][0] === 0 && bitmap[1][0] === 0\n\tconst removeLast = bitmap[0][bitmap[0].length-1] === 0 && bitmap[1][bitmap[0].length-1] === 0\n\n\tbitmap.forEach((row) => {\n\t\tconst trimmedBitmapRow: number[] = []\n\t\trow.forEach((block, index) => {\n\t\t\tif ((index !== 0 || !removeFirst) && (index !== row.length-1 || !removeLast)) {\n\t\t\t\ttrimmedBitmapRow.push(block)\n\t\t\t}\n\t\t})\n\t\ttrimmedBitmap.push(trimmedBitmapRow)\n\t})\n\n\n\n\treturn trimmedBitmap\n}\n\nexport default Shape\n","import {TouchEventHandler} from 'react'\n\nimport {NullableShapeState} from '../../state/shapes/shape-types'\nimport Shape from '../shape/shape'\n\nimport './shape-window.scss'\n\nexport interface ShapeWindowProps {\n\tonTouchStart?: TouchEventHandler | undefined,\n\ttitle: string,\n\tshape: NullableShapeState\n}\n\nconst ShapeWindow = ({title, shape, onTouchStart}: ShapeWindowProps) => {\n\treturn (\n\t\t<div onTouchStart={onTouchStart} className=\"shape-window\">\n\t\t\t<p>{title}</p>\n\t\t\t{shape && <Shape {...shape} />}\n\t\t</div>\n\t)\n}\n\nexport default ShapeWindow\n","import {BlockColor} from '../../data/shapes'\n\nexport const generateInitialGrid = (numOfRows: number, numOfColumns: number) => {\n\treturn new Array(numOfRows).fill(generateEmptyRow(numOfColumns))\n}\n\nexport const generateEmptyRow = (numOfColumns: number) => {\n\treturn new Array(numOfColumns).fill({\n\t\tisGhosted: false,\n\t\tcolor: BlockColor.Empty\n\t})\n}\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\n\nimport {BlockProps} from '../../components/block/block'\nimport {TOTAL_COLUMNS, TOTAL_ROWS} from '../../data/grid'\nimport {generateInitialGrid} from './grid-generator'\n\nexport interface GridState {\n\trows: BlockProps[][],\n\tgutterRows: BlockProps[][]\n}\n\nconst initialState: GridState = {\n\trows: generateInitialGrid(TOTAL_ROWS, TOTAL_COLUMNS),\n\tgutterRows: generateInitialGrid(TOTAL_ROWS, TOTAL_COLUMNS)\n}\n\nexport const gridSlice = createSlice({\n\tname: 'grid',\n\tinitialState,\n\treducers: {\n\t\tupdate: (state: GridState, action: PayloadAction<GridState>) => {\n\t\t\treturn action.payload\n\t\t}\n\t}\n})\n\nexport const { update } = gridSlice.actions\n","export const TOTAL_ROWS = 20\nexport const TOTAL_COLUMNS = 10\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\nimport {TICK_INTERVAL} from '../../data/game'\n\nexport interface GameState {\n\tgameOver: boolean,\n\tinterval?: NodeJS.Timeout,\n\tlevel: number,\n\tlines: number,\n\tpaused: boolean,\n\tremainingLines: number,\n\tscore: number,\n\ttickInterval: number\n}\n\nconst initialState: GameState = {\n\tgameOver: false,\n\tlevel: 1,\n\tlines: 0,\n\tpaused: true,\n\tremainingLines: 10,\n\tscore: 0,\n\ttickInterval: TICK_INTERVAL\n}\n\nexport const gameSlice = createSlice({\n\tname: 'game',\n\tinitialState,\n\treducers: {\n\t\tremovedLines: (state: GameState, action: PayloadAction<number>) => {\n\t\t\tconst countRemovedLines = action.payload\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tlines: state.lines + countRemovedLines,\n\t\t\t\tremainingLines: state.remainingLines - countRemovedLines,\n\t\t\t\tscore: state.score + (100 * countRemovedLines)\n\t\t\t}\n\t\t},\n\t\tpause: (state: GameState) => {\n\t\t\tif (state.interval != null) {\n\t\t\t\tclearInterval(state.interval) // TODO: figure out where to put this since this is a side effect\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinterval: undefined,\n\t\t\t\tpaused: !state.paused\n\t\t\t}\n\t\t},\n\t\tcreatedInterval: (state: GameState, action: PayloadAction<NodeJS.Timeout>) => {\n\t\t\tif (state.interval != null) {\n\t\t\t\tclearInterval(state.interval) // TODO: figure out where to put this since this is a side effect\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tinterval: action.payload\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const { pause, removedLines, createdInterval } = gameSlice.actions\n","export const TICK_INTERVAL = 1000 // 1 second\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\n\nimport {Coordinate, NullableShapeState, ShapeState} from './shape-types'\n\nconst initialState: NullableShapeState = null as NullableShapeState\n\nexport const currentSlice = createSlice({\n\tname: 'current',\n\tinitialState,\n\treducers: {\n\t\tmove: (state: NullableShapeState, action: PayloadAction<Coordinate>) => {\n\t\t\tif (state == null) {\n\t\t\t\treturn state\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tposition: action.payload\n\t\t\t}\n\t\t},\n\t\trotate: (state: NullableShapeState) => {\n\t\t\tif (state == null) {\n\t\t\t\treturn state\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\torientation: (state.orientation + 1) % 4\n\t\t\t}\n\t\t},\n\t\tupdate: (state: NullableShapeState, action: PayloadAction<ShapeState>) => {\n\t\t\tif (action.payload != null) {\n\t\t\t\treturn action.payload\n\t\t\t} else {\n\t\t\t\treturn state\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const currentActions = currentSlice.actions\n","import {totalNumShapes} from '../../data/shapes'\nimport {ShapeState} from './shape-types'\n\nexport const generateNextShape = () => {\n\tconst shapeTypeId = Math.floor(Math.random() * totalNumShapes)\n\tconst shape: ShapeState = {\n\t\ttype: shapeTypeId,\n\t\torientation: 0\n\t}\n\n\treturn shape\n}\n","import {createSlice} from '@reduxjs/toolkit'\n\nimport {ShapeState} from './shape-types'\nimport {generateNextShape} from './shape-generator'\n\nconst initialState: ShapeState = generateNextShape()\n\nexport const nextSlice = createSlice({\n\tname: 'next',\n\tinitialState,\n\treducers: {\n\t\tupdate: () => {\n\t\t\treturn generateNextShape() // TODO: fix this\n\t\t}\n\t}\n})\n\nexport const nextActions = nextSlice.actions\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit'\n\nimport {NullableShapeState, ShapeState} from './shape-types'\n\nconst initialState: NullableShapeState = null as NullableShapeState\n\nexport const holdSlice = createSlice({\n\tname: 'hold',\n\tinitialState,\n\treducers: {\n\t\tupdate: (state: NullableShapeState, action: PayloadAction<ShapeState>) => {\n\t\t\tif (action.payload != null) {\n\t\t\t\treturn action.payload\n\t\t\t} else {\n\t\t\t\treturn state\n\t\t\t}\n\t\t}\n\t}\n})\n\nexport const holdActions = holdSlice.actions\n","import {AppDispatch, RootState} from '../../state/store'\nimport {BlockProps} from '../../components/block/block'\nimport {availableShapes, BlockColor} from '../../data/shapes'\nimport {GridState, update} from '../../state/grid/grid-slice'\nimport {TOTAL_COLUMNS, TOTAL_ROWS} from '../../data/grid'\nimport {removedLines} from '../../state/game/game-slice'\nimport {Coordinate, ShapeState} from '../../state/shapes/shape-types'\nimport {currentActions} from '../../state/shapes/current-slice'\nimport {nextActions} from '../../state/shapes/next-slice'\nimport {holdActions} from '../../state/shapes/hold-slice'\n\nexport const tick = () => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, current)\n\n\tif (!canShapeMove) {\n\t\tconst {rowsRemovedCount, newGrid} = removeCompleteRows(grid.rows)\n\t\tdispatch(removedLines(rowsRemovedCount))\n\n\t\tconst gridState: GridState = {\n\t\t\trows: newGrid,\n\t\t\tgutterRows: newGrid\n\t\t}\n\t\tdispatch(update(gridState))\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: renderNewGrid(gutter, current),\n\t\tgutterRows: gutter\n\t}\n\tdispatch(update(gridState))\n\n\t// move down one\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst incrementedPosition = { x: currentPosition.x, y: currentPosition.y + 1 }\n\treturn dispatch(currentActions.move(incrementedPosition))\n}\n\nexport const moveToTheSide = (movement: number) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// move left/right\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst incrementedPosition = { x: currentPosition.x + movement, y: currentPosition.y }\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, {\n\t\ttype: current.type,\n\t\torientation: current.orientation,\n\t\tposition: incrementedPosition\n\t})\n\n\tif (!canShapeMove) {\n\t\treturn\n\t}\n\n\tdispatch(currentActions.move(incrementedPosition))\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: !canShapeMove ? grid.rows : renderNewGrid(gutter, current),\n\t\tgutterRows: !canShapeMove ? grid.rows : gutter\n\t}\n\tdispatch(update(gridState))\n}\n\nexport const rotate = (increment: number) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { grid, current, next } = getState()\n\n\tconst gutter = grid.gutterRows\n\n\t// check if shape exists?\n\tif (current == null) {\n\t\treturn useNext(dispatch, next)\n\t}\n\n\t// move left/right\n\tconst currentPosition = current.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\n\t// check if shape can be rendered\n\tconst canShapeMove = checkCanShapeMove(gutter, {\n\t\ttype: current.type,\n\t\torientation: (current.orientation + increment) % 4,\n\t\tposition: currentPosition\n\t})\n\n\tif (!canShapeMove) {\n\t\treturn\n\t}\n\n\tdispatch(currentActions.rotate())\n\n\t// render new grid\n\tconst gridState: GridState = {\n\t\trows: !canShapeMove ? grid.rows : renderNewGrid(gutter, current),\n\t\tgutterRows: !canShapeMove ? grid.rows : gutter\n\t}\n\tdispatch(update(gridState))\n}\n\nexport const useNext = (dispatch: AppDispatch, next: ShapeState) => {\n\tdispatch(currentActions.update(next))\n\treturn dispatch(nextActions.update())\n}\n\nexport const swapHold = () => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst { current, hold, next } = getState()\n\n\tif (hold != null) {\n\t\tdispatch(currentActions.update(hold))\n\t} else {\n\t\tdispatch(currentActions.update(next))\n\t\tdispatch(nextActions.update())\n\t}\n\n\tif (current != null) {\n\t\tdispatch(holdActions.update(current))\n\t}\n}\n\nconst removeCompleteRows = (grid: BlockProps[][]) => {\n\tconst newGrid = grid.filter((row) =>\n\t\t// row is not complete\n\t\trow.findIndex((block) => block.color === BlockColor.Empty) !== -1\n\t)\n\n\tconst completedRowsCount = TOTAL_ROWS - newGrid.length\n\n\tfor (let i = 0; i < completedRowsCount; i++) {\n\t\tnewGrid.unshift(new Array(TOTAL_COLUMNS)\n\t\t\t.fill({\n\t\t\t\tisGhosted: false,\n\t\t\t\tcolor: BlockColor.Empty\n\t\t\t}))\n\t}\n\n\treturn {\n\t\trowsRemovedCount: completedRowsCount,\n\t\tnewGrid: newGrid\n\t}\n}\n\nconst computeShapeCoordinates = (shape: ShapeState) => {\n\tconst shapeData = availableShapes[shape.type]\n\tconst bitmap = shapeData.bitmap[shape.orientation]\n\tconst position = shape.position || {x: 3, y: 0} // x = (10 - 4) / 2\n\tconst coordinates: Coordinate[] = []\n\n\tbitmap.forEach((row, yIx) => {\n\t\trow.forEach((bit, xIx) => {\n\t\t\tif (bit === 1) {\n\t\t\t\tcoordinates.push({\n\t\t\t\t\tx: position.x + xIx,\n\t\t\t\t\ty: position.y + yIx\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t})\n\n\treturn coordinates\n}\n\nconst checkCanShapeMove = (gutter: BlockProps[][], shape: ShapeState) => {\n\tconst shapeCoordinates = computeShapeCoordinates(shape)\n\n\tfor (let coordinate of shapeCoordinates) {\n\t\t// check if in bounds\n\t\tif (coordinate.x >= TOTAL_COLUMNS || coordinate.x < 0) return false\n\t\tif (coordinate.y >= TOTAL_ROWS || coordinate.y < 0) return false\n\n\t\t// check if block exists\n\t\tconst existingBlock = gutter[coordinate.y][coordinate.x]\n\n\t\tif (existingBlock.color !== BlockColor.Empty) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nconst renderNewGrid = (gutter: BlockProps[][], shape: ShapeState) => {\n\t// copy existing gutter\n\tconst newGrid: BlockProps[][] = []\n\n\tgutter.forEach((row) => {\n\t\tconst newGridRow: BlockProps[] = []\n\t\trow.forEach((block) => {\n\t\t\tnewGridRow.push(block)\n\t\t})\n\t\tnewGrid.push(newGridRow)\n\t})\n\n\tconst shapeCoordinates = computeShapeCoordinates(shape)\n\n\tshapeCoordinates.forEach((coordinate) => {\n\t\tnewGrid[coordinate.y][coordinate.x] = {\n\t\t\tisGhosted: false,\n\t\t\tcolor: availableShapes[shape.type].color\n\t\t}\n\t})\n\n\treturn newGrid\n}\n","import {useDispatch, useSelector} from 'react-redux'\n\nimport ShapeWindow from '../../components/shape-window/shape-window'\nimport {handleOnTouchHoldContainer} from '../../controllers/input-controller/touch-controller'\nimport {RootState} from '../../state/store'\n\nexport const NextShapeWindow = () => {\n\tconst next = useSelector((state: RootState) => state.next)\n\n\treturn (\n\t\t<ShapeWindow title=\"Next\" shape={next}/>\n\t)\n}\n\nexport const HoldShapeWindow = () => {\n\tconst hold = useSelector((state: RootState) => state.hold)\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<ShapeWindow\n\t\t\ttitle=\"Hold\"\n\t\t\tshape={hold}\n\t\t\tonTouchStart={(event) => dispatch(handleOnTouchHoldContainer(event))}\n\t\t/>\n\t)\n}\n","import React from 'react'\n\nimport {AppDispatch, RootState} from '../../state/store'\nimport {swapHold} from '../game-controller/game-controller'\n\nexport const handleOnTouchHoldContainer = (onTouchEvent: React.TouchEvent) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tdispatch(swapHold())\n}\n","import Block, {BlockProps} from '../block/block'\n\nimport './grid.scss'\n\ninterface GridProps {\n\trows: BlockProps[][]\n}\n\nconst Grid = ({rows}: GridProps) => {\n\tconst gridContents = rows.map((row, rowIx) => {\n\t\tconst renderedRow = row.map((block, columnIx) => {\n\t\t\treturn (\n\t\t\t\t<Block\n\t\t\t\t\tkey={`block-${rowIx}-${columnIx}`}\n\t\t\t\t\tisGhosted={block.isGhosted}\n\t\t\t\t\tcolor={block.color}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\n\t\treturn (\n\t\t\t<div className=\"grid__row\" key={`grid-row-${rowIx}`}>\n\t\t\t\t{renderedRow}\n\t\t\t</div>\n\t\t)\n\t})\n\n\treturn (\n\t\t<div className=\"grid\">\n\t\t\t{gridContents}\n\t\t</div>\n\t)\n}\n\nexport default Grid\n","import {useSelector} from 'react-redux'\n\nimport Grid from '../../components/grid/grid'\nimport {RootState} from '../../state/store'\n\nconst GridContainer = () => {\n\tconst grid = useSelector((state: RootState) => state.grid)\n\n\treturn (\n\t\t<Grid rows={grid.rows}/>\n\t)\n}\n\nexport default GridContainer\n","import {useSelector} from 'react-redux'\n\nimport {RootState} from '../../state/store'\n\nimport './stats-view.scss'\n\ninterface StatProps {\n\tlabel: string,\n\tvalue: number\n}\n\nconst Stat = ({ label, value }: StatProps) => {\n\treturn (\n\t\t<div className='stat'>\n\t\t\t<label>{label}: </label>\n\t\t\t<span>{value}</span>\n\t\t</div>\n\t)\n}\n\nconst StatsView = () => {\n\tconst game = useSelector((state: RootState) => state.game)\n\n\treturn (\n\t\t<div className='stats-view-container'>\n\t\t\t<Stat label='Level' value={game.level} />\n\t\t\t<Stat label='Score' value={game.score} />\n\t\t\t<Stat label='Lines' value={game.lines} />\n\t\t</div>\n\t)\n}\n\nexport default StatsView\n","import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {HoldShapeWindow, NextShapeWindow} from '../shape-window/shape-window'\nimport GridContainer from '../grid-container/grid-container'\nimport {tick} from '../../controllers/game-controller/game-controller'\nimport {createdInterval} from '../../state/game/game-slice'\nimport {RootState} from '../../state/store'\nimport StatsView from '../stats-view/stats-view'\n\nimport './game-view.scss'\n\ninterface GameViewProps {\n\tisPaused: boolean,\n\ttickInterval: number\n}\n\nconst GameView = ({ isPaused, tickInterval }: GameViewProps) => {\n\tconst currentInterval = useSelector((state: RootState) => state.game.interval)\n\n\tconst dispatch = useDispatch()\n\n\tuseEffect(() => {\n\t\tif (currentInterval == null) {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tdispatch(tick())\n\t\t\t}, tickInterval)\n\n\t\t\tdispatch(createdInterval(interval))\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [dispatch, tickInterval, isPaused])\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className=\"game-view__grid\">\n\t\t\t\t<GridContainer />\n\t\t\t</div>\n\t\t\t<div className=\"game-view__side-bar\">\n\t\t\t\t<NextShapeWindow />\n\t\t\t\t<HoldShapeWindow />\n\t\t\t\t<StatsView />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t)\n}\n\nexport default GameView\n","import React from 'react'\n\nimport {moveToTheSide, rotate, swapHold, tick} from '../game-controller/game-controller'\nimport {pause} from '../../state/game/game-slice'\nimport {AppDispatch, RootState} from '../../state/store'\n\ninterface KeyPressHandlerType {\n\t[index: string]: () => any\n}\n\nconst keyPressHandler: KeyPressHandlerType = {\n\tArrowDown: tick, // drop soft\n\tArrowLeft: () => moveToTheSide(-1), // move left\n\tArrowRight: () => moveToTheSide(1), // move right\n\tArrowUp: () => rotate(1), // rotate\n\t' ': () => {\n\t\tconsole.log('drop: hard')\n\t}, // hard drop\n\tp: pause,\n\tP: pause,\n\tShift: swapHold // hold\n}\n\nexport const handleKeyPress = (event: React.KeyboardEvent) => (dispatch: AppDispatch, getState: () => RootState) => {\n\tconst handler = keyPressHandler[event.key]\n\thandler && dispatch(handler())\n}\n","import {useDispatch} from 'react-redux'\n\nimport {handleKeyPress} from '../../controllers/input-controller/key-press-controller'\nimport {gameSlice} from '../../state/game/game-slice'\n\nimport './pause-view.scss'\n\nconst PauseView = () => {\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<div onKeyDown={(event) => dispatch(handleKeyPress(event))} tabIndex={-1}>\n\t\t\t<p>Pause</p>\n\t\t\t<button onClick={() => dispatch(gameSlice.actions.pause())}>Start</button>\n\t\t</div>\n\t)\n}\n\nexport default PauseView\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport GameView from '../../containers/game-view/game-view'\nimport PauseView from '../../containers/pause-view/pause-view'\nimport {handleKeyPress} from '../../controllers/input-controller/key-press-controller'\nimport {RootState} from '../../state/store'\n\nimport './tetris-page.scss'\n\nconst TetrisPage = () => {\n\tconst isPaused = useSelector((state: RootState) => state.game.paused)\n\tconst tickInterval = useSelector((state: RootState) => state.game.tickInterval)\n\n\tconst dispatch = useDispatch()\n\n\treturn (\n\t\t<div className=\"tetris-page\" onKeyDown={(event) => dispatch(handleKeyPress(event))} tabIndex={-1}>\n\t\t\t<div className=\"tetris-page__title\">Tetris</div>\n\t\t\t<div className=\"tetris-page__content\">\n\t\t\t\t{\n\t\t\t\t\tisPaused ?\n\t\t\t\t\t\t<PauseView/>\n\t\t\t\t\t\t: <GameView\n\t\t\t\t\t\t\tisPaused={isPaused}\n\t\t\t\t\t\t\ttickInterval={tickInterval}\n\t\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default TetrisPage\n","import React from 'react'\nimport './App.scss'\nimport {HashRouter, Route, Routes} from 'react-router-dom'\nimport TetrisPage from './pages/tetris/tetris-page'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<HashRouter basename=\"/\">\n\t\t\t\t<Routes>\n\t\t\t\t\t<Route path=\"/\" element={<TetrisPage />} />\n\t\t\t\t</Routes>\n\t\t\t</HashRouter>\n\t\t\t<footer className='app__footer'>\n\t\t\t\tmade with &hearts; by <a href='https://github.com/leahferrell/tetris-react' target='_blank' rel=\"noreferrer\">leahferrell</a>\n\t\t\t</footer>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import {configureStore} from '@reduxjs/toolkit'\n\nimport {gameSlice} from './game/game-slice'\nimport {gridSlice} from './grid/grid-slice'\nimport {currentSlice} from './shapes/current-slice'\nimport {holdSlice} from './shapes/hold-slice'\nimport {nextSlice} from './shapes/next-slice'\n\nexport const store = configureStore({\n\treducer: {\n\t\tcurrent: currentSlice.reducer,\n\t\tgame: gameSlice.reducer,\n\t\tgrid: gridSlice.reducer,\n\t\thold: holdSlice.reducer,\n\t\tnext: nextSlice.reducer\n\t}\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './state/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}